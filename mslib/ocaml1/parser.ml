type exp = N of int | S of string | V of string | Add of (exp*exp) | Sub of (exp*exp) | Mul of (exp*exp) | List of (exp list) | Dictle of (exp*exp) | Dictl of (exp list) | And of (exp*exp) | Or of (exp*exp) | Ife of (exp*exp*exp) | Div of (exp*exp) | Mod of (exp*exp) | Get of (exp*exp) | Listl of (exp list) | Isequal of (exp*exp) | Le of (exp*exp) | Ge of (exp*exp) | Ls of (exp*exp) | Gt of (exp*exp ) | Notequal of (exp*exp) | Not of exp | Attr of (exp*string) | None ;;

type inst = Skip | Tag of (exp*exp*inst) | Defn of (exp*exp*inst) | Forl of (exp*exp*exp*inst) | Listi of ( inst list) | Ifel of ((exp*inst) list) | Assign of (exp*exp);;
type token =
  | NUMBER of (int)
  | STRING of (string)
  | NAME of (string)
  | ADD
  | SUB
  | MUL
  | MOD
  | DIV
  | COLON
  | LPARENM
  | RPARENM
  | LPAREN
  | RPAREN
  | LPARENB
  | RPARENB
  | TRUE
  | FALSE
  | AND
  | OR
  | QUESTION
  | SEMICOLON
  | COMMA
  | EQUAL
  | IF
  | ELIF
  | ELSE
  | FOR
  | ISEQUAL
  | LE
  | GE
  | LS
  | GT
  | NOTEQUAL
  | NOT
  | DOT
  | NONE
  | DEFINE
  | EOF

open Parsing;;
let yytransl_const = [|
  260 (* ADD *);
  261 (* SUB *);
  262 (* MUL *);
  263 (* MOD *);
  264 (* DIV *);
  265 (* COLON *);
  266 (* LPARENM *);
  267 (* RPARENM *);
  268 (* LPAREN *);
  269 (* RPAREN *);
  270 (* LPARENB *);
  271 (* RPARENB *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* AND *);
  275 (* OR *);
  276 (* QUESTION *);
  277 (* SEMICOLON *);
  278 (* COMMA *);
  279 (* EQUAL *);
  280 (* IF *);
  281 (* ELIF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* ISEQUAL *);
  285 (* LE *);
  286 (* GE *);
  287 (* LS *);
  288 (* GT *);
  289 (* NOTEQUAL *);
  290 (* NOT *);
  291 (* DOT *);
  292 (* NONE *);
  293 (* DEFINE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* STRING *);
  259 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\007\000\007\000\004\000\004\000\
\008\000\008\000\005\000\005\000\009\000\009\000\009\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\002\000\002\000\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\005\000\
\001\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\004\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\003\000\001\000\003\000\002\000\003\000\
\001\000\003\000\002\000\003\000\003\000\004\000\004\000\002\000\
\003\000\002\000\003\000\002\000\001\000\003\000\004\000\009\000\
\007\000\002\000\002\000\001\000\002\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\009\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\000\000\000\000\005\000\000\000\056\000\
\001\000\000\000\011\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\019\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\051\000\053\000\000\000\000\000\
\037\000\000\000\000\000\043\000\000\000\032\000\000\000\031\000\
\000\000\010\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\000\000\038\000\039\000\000\000\030\000\034\000\
\000\000\000\000\017\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\019\000\020\000\028\000\029\000\035\000\
\021\000\022\000\023\000"

let yysindex = "\016\000\
\199\002\000\000\000\000\000\000\246\254\081\255\038\003\227\002\
\000\000\000\000\038\003\008\255\038\003\000\000\020\255\000\000\
\000\000\142\003\000\000\000\000\143\002\171\002\245\254\252\002\
\000\000\013\255\078\003\000\000\252\254\000\000\017\003\238\003\
\000\000\014\004\010\255\124\255\023\255\014\005\246\254\199\002\
\038\003\038\003\038\003\038\003\038\003\038\003\038\003\038\003\
\038\003\000\000\038\003\038\003\038\003\038\003\038\003\038\003\
\038\003\024\255\000\000\009\255\000\000\000\000\038\003\199\002\
\000\000\174\003\255\254\000\000\038\003\000\000\038\003\000\000\
\046\004\000\000\038\003\000\000\227\002\009\255\011\255\009\255\
\218\255\218\255\034\005\014\005\034\005\078\004\014\005\014\005\
\110\004\142\004\014\005\014\005\014\005\014\005\014\005\014\005\
\000\000\124\255\009\255\000\000\000\000\014\005\000\000\000\000\
\206\003\059\003\000\000\038\003\000\000\009\255\012\255\174\004\
\014\005\038\003\199\002\206\004\009\255\199\002\009\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\110\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\234\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\255\000\000\000\000\000\000\081\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\094\000\
\015\001\052\001\164\255\110\001\206\255\000\000\139\001\168\001\
\000\000\000\000\197\001\226\001\255\001\028\002\057\002\086\002\
\000\000\000\000\122\000\000\000\000\000\253\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\150\000\238\004\000\000\
\115\002\000\000\000\000\000\000\178\000\000\000\206\000"

let yygindex = "\000\000\
\000\000\250\255\254\255\000\000\000\000\220\255\012\000\229\255\
\022\000\248\255\000\000"

let yytablesize = 1605
let yytable = "\026\000\
\044\000\024\000\052\000\027\000\032\000\034\000\070\000\028\000\
\036\000\028\000\038\000\101\000\060\000\063\000\064\000\062\000\
\001\000\071\000\028\000\037\000\071\000\066\000\039\000\068\000\
\076\000\079\000\097\000\078\000\073\000\061\000\033\000\080\000\
\106\000\114\000\103\000\067\000\040\000\042\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\104\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\099\000\
\000\000\000\000\000\000\000\000\098\000\000\000\000\000\000\000\
\000\000\054\000\102\000\000\000\073\000\000\000\000\000\000\000\
\034\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\000\000\000\000\000\000\000\000\
\000\000\110\000\006\000\025\000\007\000\041\000\008\000\000\000\
\009\000\010\000\000\000\000\000\000\000\000\000\000\000\112\000\
\011\000\113\000\117\000\012\000\000\000\119\000\000\000\116\000\
\000\000\000\000\013\000\000\000\014\000\015\000\000\000\000\000\
\000\000\046\000\000\000\000\000\003\000\004\000\005\000\041\000\
\042\000\043\000\044\000\045\000\000\000\006\000\000\000\007\000\
\000\000\077\000\000\000\009\000\010\000\047\000\048\000\049\000\
\000\000\000\000\000\000\011\000\000\000\055\000\012\000\052\000\
\053\000\054\000\055\000\056\000\057\000\013\000\058\000\014\000\
\015\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\
\012\000\049\000\012\000\012\000\012\000\000\000\000\000\000\000\
\012\000\012\000\012\000\012\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\012\000\
\012\000\000\000\000\000\000\000\000\000\048\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\015\000\015\000\043\000\
\044\000\045\000\015\000\015\000\015\000\015\000\000\000\046\000\
\015\000\045\000\000\000\047\000\048\000\049\000\000\000\015\000\
\000\000\015\000\015\000\000\000\000\000\052\000\053\000\054\000\
\055\000\056\000\057\000\000\000\058\000\000\000\000\000\000\000\
\000\000\044\000\044\000\044\000\031\000\031\000\031\000\031\000\
\031\000\031\000\044\000\044\000\044\000\052\000\031\000\000\000\
\044\000\044\000\031\000\031\000\031\000\031\000\000\000\031\000\
\044\000\044\000\044\000\044\000\031\000\031\000\031\000\031\000\
\031\000\031\000\044\000\031\000\044\000\044\000\042\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\042\000\042\000\000\000\042\000\000\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\000\000\054\000\054\000\054\000\000\000\000\000\042\000\
\000\000\042\000\042\000\054\000\054\000\054\000\000\000\054\000\
\000\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\054\000\054\000\054\000\000\000\041\000\041\000\
\041\000\000\000\000\000\054\000\000\000\054\000\054\000\041\000\
\041\000\041\000\000\000\041\000\000\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\000\000\046\000\046\000\046\000\000\000\000\000\041\000\
\000\000\041\000\041\000\046\000\046\000\046\000\000\000\046\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\046\000\046\000\000\000\055\000\055\000\
\055\000\000\000\000\000\046\000\000\000\046\000\046\000\055\000\
\055\000\055\000\000\000\055\000\000\000\055\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\055\000\
\055\000\000\000\049\000\049\000\049\000\000\000\000\000\055\000\
\000\000\055\000\055\000\049\000\049\000\049\000\000\000\049\000\
\000\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\000\000\048\000\048\000\
\048\000\000\000\000\000\049\000\000\000\049\000\049\000\048\000\
\048\000\048\000\000\000\048\000\000\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\000\000\045\000\045\000\045\000\000\000\000\000\048\000\
\000\000\048\000\048\000\045\000\045\000\045\000\000\000\045\000\
\000\000\045\000\045\000\000\000\000\000\000\000\045\000\000\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\045\000\045\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\000\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\013\000\
\000\000\000\000\000\000\013\000\013\000\013\000\013\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\013\000\013\000\014\000\014\000\014\000\014\000\
\014\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\000\000\000\000\000\000\
\014\000\014\000\014\000\014\000\000\000\000\000\014\000\000\000\
\000\000\027\000\027\000\027\000\000\000\014\000\000\000\014\000\
\014\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
\027\000\027\000\000\000\000\000\000\000\027\000\027\000\027\000\
\027\000\000\000\000\000\027\000\000\000\000\000\016\000\016\000\
\016\000\000\000\027\000\000\000\027\000\027\000\016\000\016\000\
\016\000\016\000\016\000\000\000\016\000\016\000\016\000\000\000\
\000\000\000\000\016\000\016\000\016\000\016\000\000\000\000\000\
\016\000\000\000\000\000\007\000\007\000\007\000\000\000\016\000\
\000\000\016\000\016\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\007\000\000\000\000\000\000\000\007\000\
\007\000\007\000\007\000\000\000\000\000\007\000\000\000\000\000\
\006\000\006\000\006\000\000\000\007\000\000\000\007\000\007\000\
\006\000\006\000\006\000\006\000\006\000\000\000\006\000\006\000\
\006\000\000\000\000\000\000\000\006\000\006\000\006\000\006\000\
\000\000\000\000\006\000\000\000\000\000\020\000\020\000\020\000\
\000\000\006\000\000\000\006\000\006\000\020\000\020\000\020\000\
\020\000\020\000\000\000\020\000\020\000\020\000\000\000\000\000\
\000\000\020\000\020\000\020\000\020\000\000\000\000\000\020\000\
\000\000\000\000\021\000\021\000\021\000\000\000\020\000\000\000\
\020\000\020\000\021\000\021\000\021\000\021\000\021\000\000\000\
\021\000\021\000\021\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\000\000\000\000\021\000\000\000\000\000\022\000\
\022\000\022\000\000\000\021\000\000\000\021\000\021\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\022\000\
\000\000\000\000\000\000\022\000\022\000\022\000\022\000\000\000\
\000\000\022\000\000\000\000\000\023\000\023\000\023\000\000\000\
\022\000\000\000\022\000\022\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\023\000\023\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\000\000\000\000\023\000\000\000\
\000\000\024\000\024\000\024\000\000\000\023\000\000\000\023\000\
\023\000\024\000\024\000\024\000\024\000\024\000\000\000\024\000\
\024\000\024\000\000\000\000\000\000\000\024\000\024\000\024\000\
\024\000\000\000\000\000\024\000\000\000\000\000\025\000\025\000\
\025\000\000\000\024\000\000\000\024\000\024\000\025\000\025\000\
\025\000\025\000\025\000\000\000\025\000\025\000\025\000\000\000\
\000\000\000\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\000\000\000\000\008\000\008\000\008\000\000\000\025\000\
\000\000\025\000\025\000\008\000\008\000\008\000\008\000\008\000\
\000\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\000\000\000\000\008\000\000\000\003\000\
\004\000\005\000\000\000\000\000\008\000\000\000\008\000\008\000\
\006\000\000\000\007\000\000\000\008\000\000\000\009\000\010\000\
\000\000\000\000\000\000\059\000\000\000\000\000\011\000\000\000\
\000\000\012\000\000\000\003\000\004\000\005\000\000\000\000\000\
\013\000\000\000\014\000\015\000\006\000\000\000\007\000\000\000\
\008\000\000\000\009\000\010\000\000\000\000\000\000\000\061\000\
\000\000\000\000\011\000\000\000\000\000\012\000\000\000\003\000\
\004\000\005\000\000\000\000\000\013\000\000\000\014\000\015\000\
\006\000\000\000\007\000\000\000\008\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\012\000\000\000\003\000\004\000\030\000\000\000\000\000\
\013\000\000\000\014\000\015\000\031\000\000\000\007\000\000\000\
\008\000\033\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\004\000\030\000\000\000\
\000\000\000\000\000\000\000\000\013\000\031\000\014\000\007\000\
\065\000\008\000\000\000\009\000\010\000\000\000\000\000\000\000\
\000\000\003\000\004\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\072\000\007\000\013\000\008\000\014\000\
\009\000\010\000\000\000\000\000\000\000\000\000\003\000\004\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\007\000\013\000\008\000\014\000\009\000\010\000\000\000\
\000\000\000\000\000\000\003\000\004\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\007\000\013\000\
\008\000\014\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\041\000\042\000\043\000\044\000\045\000\069\000\000\000\
\000\000\000\000\000\000\046\000\013\000\000\000\014\000\047\000\
\048\000\049\000\050\000\000\000\051\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\019\000\
\019\000\019\000\019\000\000\000\019\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\019\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\050\000\000\000\051\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\069\000\000\000\
\000\000\000\000\100\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\107\000\000\000\000\000\047\000\
\048\000\049\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\074\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\069\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\107\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\108\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\109\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\115\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\118\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\058\000\019\000\019\000\019\000\019\000\019\000\000\000\000\000\
\000\000\000\000\019\000\019\000\000\000\000\000\000\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\019\000\041\000\042\000\043\000\044\000\045\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\052\000\053\000\054\000\055\000\056\000\057\000\046\000\
\058\000\000\000\000\000\047\000\048\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\053\000\054\000\
\055\000\056\000\057\000\000\000\058\000"

let yycheck = "\006\000\
\000\000\012\001\000\000\006\000\007\000\008\000\011\001\011\001\
\011\000\013\001\013\000\013\001\021\000\025\001\026\001\022\000\
\001\000\022\001\022\001\012\001\022\001\024\000\003\001\011\001\
\015\001\003\001\003\001\036\000\031\000\021\001\015\001\040\000\
\022\001\022\001\071\000\024\000\015\000\000\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\075\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\064\000\
\255\255\255\255\255\255\255\255\063\000\255\255\255\255\255\255\
\255\255\000\000\069\000\255\255\071\000\255\255\255\255\255\255\
\075\000\255\255\077\000\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\098\000\010\001\011\001\012\001\000\000\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\106\000\
\024\001\108\000\115\000\027\001\255\255\118\000\255\255\114\000\
\255\255\255\255\034\001\255\255\036\001\037\001\255\255\255\255\
\255\255\000\000\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\000\000\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\000\000\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\255\255\000\000\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\006\001\
\007\001\008\001\021\001\022\001\023\001\024\001\255\255\014\001\
\027\001\000\000\255\255\018\001\019\001\020\001\255\255\034\001\
\255\255\036\001\037\001\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\011\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\001\001\002\001\003\001\255\255\255\255\034\001\
\255\255\036\001\037\001\010\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\255\255\001\001\002\001\
\003\001\255\255\255\255\034\001\255\255\036\001\037\001\010\001\
\011\001\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\001\001\002\001\003\001\255\255\255\255\034\001\
\255\255\036\001\037\001\010\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\255\255\001\001\002\001\
\003\001\255\255\255\255\034\001\255\255\036\001\037\001\010\001\
\011\001\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\001\001\002\001\003\001\255\255\255\255\034\001\
\255\255\036\001\037\001\010\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\255\255\001\001\002\001\
\003\001\255\255\255\255\034\001\255\255\036\001\037\001\010\001\
\011\001\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\001\001\002\001\003\001\255\255\255\255\034\001\
\255\255\036\001\037\001\010\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\036\001\037\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\001\001\002\001\003\001\255\255\034\001\255\255\036\001\
\037\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\255\255\001\001\002\001\
\003\001\255\255\034\001\255\255\036\001\037\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\001\001\002\001\003\001\255\255\034\001\
\255\255\036\001\037\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\255\255\255\255\
\001\001\002\001\003\001\255\255\034\001\255\255\036\001\037\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\255\255\255\255\001\001\002\001\003\001\
\255\255\034\001\255\255\036\001\037\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\255\255\255\255\001\001\002\001\003\001\255\255\034\001\255\255\
\036\001\037\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\255\255\255\255\001\001\
\002\001\003\001\255\255\034\001\255\255\036\001\037\001\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\255\255\255\255\001\001\002\001\003\001\255\255\
\034\001\255\255\036\001\037\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\001\001\002\001\003\001\255\255\034\001\255\255\036\001\
\037\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\255\255\001\001\002\001\
\003\001\255\255\034\001\255\255\036\001\037\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\001\001\002\001\003\001\255\255\034\001\
\255\255\036\001\037\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\255\255\001\001\
\002\001\003\001\255\255\255\255\034\001\255\255\036\001\037\001\
\010\001\255\255\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\027\001\255\255\001\001\002\001\003\001\255\255\255\255\
\034\001\255\255\036\001\037\001\010\001\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\001\001\
\002\001\003\001\255\255\255\255\034\001\255\255\036\001\037\001\
\010\001\255\255\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\027\001\255\255\001\001\002\001\003\001\255\255\255\255\
\034\001\255\255\036\001\037\001\010\001\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\034\001\010\001\036\001\012\001\
\013\001\014\001\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\034\001\014\001\036\001\
\016\001\017\001\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\012\001\034\001\014\001\036\001\016\001\017\001\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\255\255\012\001\034\001\
\014\001\036\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\034\001\255\255\036\001\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\007\001\028\001\029\001\030\001\031\001\032\001\033\001\014\001\
\035\001\255\255\255\255\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  MOD\000\
  DIV\000\
  COLON\000\
  LPARENM\000\
  RPARENM\000\
  LPAREN\000\
  RPAREN\000\
  LPARENB\000\
  RPARENB\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  QUESTION\000\
  SEMICOLON\000\
  COMMA\000\
  EQUAL\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  ISEQUAL\000\
  LE\000\
  GE\000\
  LS\000\
  GT\000\
  NOTEQUAL\000\
  NOT\000\
  DOT\000\
  NONE\000\
  DEFINE\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  STRING\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 15 "parser.mly"
                            ( _1 )
# 622 "parser.ml"
               : inst list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 18 "parser.mly"
                       ( N _1 )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 19 "parser.mly"
                       ( N 1 )
# 635 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 20 "parser.mly"
                        ( N 0 )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "parser.mly"
                       ( None )
# 647 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 22 "parser.mly"
                         ( Or (_1, _3) )
# 655 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 23 "parser.mly"
                          ( And (_1, _3) )
# 663 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 24 "parser.mly"
                                  ( Ife (_1, _3, _5) )
# 672 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 25 "parser.mly"
             ( S _1 )
# 679 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 26 "parser.mly"
                           ( _2 )
# 686 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict) in
    Obj.repr(
# 27 "parser.mly"
                             ( _1 )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                           ( Mul(_1, _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                           ( Add(_1, _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                           ( Sub(_1, _3) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                           ( Div(_1, _3) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                           ( Mod(_1, _3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                             ( Get(_1, _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 34 "parser.mly"
                             ( Listl _1 )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 35 "parser.mly"
            ( V _1)
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                     ( Isequal (_1, _3) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                ( Le (_1, _3) )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                ( Ge (_1, _3) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                ( Ls (_1, _3) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                ( Gt (_1, _3) )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                      ( Notequal (_1, _3) )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
                 ( Attr (_1, _3) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
            ( Not (_2) )
# 818 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                      ( Dictle (_1, _3) )
# 826 "parser.ml"
               : 'dicte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dicte) in
    Obj.repr(
# 51 "parser.mly"
       ( [_1] )
# 833 "parser.ml"
               : 'dictel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dictel) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dicte) in
    Obj.repr(
# 52 "parser.mly"
                      ( _3::_1)
# 841 "parser.ml"
               : 'dictel))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                 ( Dictl [] )
# 847 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dictel) in
    Obj.repr(
# 57 "parser.mly"
                          ( Dictl _2 )
# 854 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
      ( [_1] )
# 861 "parser.ml"
               : 'listl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listl) in
    Obj.repr(
# 62 "parser.mly"
                    ( _1::_3 )
# 869 "parser.ml"
               : 'listl))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                 ( [] )
# 875 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listl) in
    Obj.repr(
# 67 "parser.mly"
                         ( _2 )
# 882 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 71 "parser.mly"
                    ( [V _1; Dictl([])] )
# 889 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                           ( [V _1; _3] )
# 897 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dictel) in
    Obj.repr(
# 73 "parser.mly"
                             ( [V _1; (Dictl _3)] )
# 905 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    Obj.repr(
# 77 "parser.mly"
                 ( Tag((List.nth _1 0), (List.nth _1 1), (Listi [])))
# 912 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 78 "parser.mly"
                          ( Defn( (List.nth _2 0), (List.nth _2 1), _3) )
# 920 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 79 "parser.mly"
                   ( Tag( (List.nth _1 0), (List.nth _1 1), _2) )
# 928 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 80 "parser.mly"
                              ( Listi _2 )
# 935 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                   ( Listi [] )
# 941 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifelif) in
    Obj.repr(
# 82 "parser.mly"
          ( Ifel (List.rev _1) )
# 948 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ifelif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 83 "parser.mly"
                         ( Ifel( List.rev((N 1, _3 )::_1)) )
# 956 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                             ( Assign (_1, _3 ) )
# 964 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 85 "parser.mly"
                                                          ( Forl(V _3, V _5, _7, _9) )
# 974 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 86 "parser.mly"
                                               ( Forl(V _3, V "", _5, _7	) )
# 983 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                  ( Skip )
# 990 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 88 "parser.mly"
                       ( _1 )
# 997 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 92 "parser.mly"
           ( [_1] )
# 1004 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 93 "parser.mly"
                         ( _1::_2 )
# 1012 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 97 "parser.mly"
                   ( [(_2, _3)] )
# 1020 "parser.ml"
               : 'ifelif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ifelif) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 98 "parser.mly"
                              ( (_3, _4)::_1 )
# 1029 "parser.ml"
               : 'ifelif))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : inst list)
